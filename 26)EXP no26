#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}
int extended_euclidean(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extended_euclidean(b, a % b, &x1, &y1);
    *x = y1;
    *y = x1 - (a / b) * y1;
    return gcd;
}
int is_prime(int num) {
    if (num <= 1) return 0;
    if (num <= 3) return 1;
    if (num % 2 == 0 || num % 3 == 0) 
	return 0;
	int i;
    for (i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return 0;
    }
    return 1;
}
int generate_prime() {
    int prime;
    do {
        prime = rand() % 100 + 2;
    } while (!is_prime(prime));
    return prime;
}
int main() {
    srand(time(0));
    int p = generate_prime();
    int q;
    do {
        q = generate_prime();
    } while (q == p);
    int n = p * q;
    printf("p = %d, q = %d\n", p, q);
    printf("n = %d\n", n);
    int phi_n = (p - 1) * (q - 1);
    printf("phi(n) = %d\n", phi_n);
    int e;
    do {
        e = rand() % (phi_n - 1) + 2; 
    } while (gcd(e, phi_n) != 1);
    printf("e = %d\n", e);
    int x, y;
    extended_euclidean(e, phi_n, &x, &y);
    int d = (x % phi_n + phi_n) % phi_n; 
    printf("d = %d\n", d);
    printf("Public Key: (e = %d, n = %d)\n", e, n);
    printf("Private Key: (d = %d, n = %d)\n", d, n);
    return 0;
}
