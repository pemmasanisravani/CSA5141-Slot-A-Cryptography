#include <stdio.h>

// Function to calculate gcd using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Extended Euclidean Algorithm to find the multiplicative inverse of e mod phi_n
int extended_euclidean(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extended_euclidean(b, a % b, &x1, &y1);
    *x = y1;
    *y = x1 - (a / b) * y1;
    return gcd;
}

int main() {
    int n = 3599; // The product of two primes p and q
    int e = 31; // The public key exponent
    int M = 77; // The plaintext block with a common factor with n
    
    // Step 1: Find the common factor of M and n
    int p = gcd(M, n);
    if (p == 1 || p == n) {
        printf("No useful common factor found.\n");
        return 1;
    }
    
    // Step 2: Compute q
    int q = n / p;
    printf("p = %d, q = %d\n", p, q);
    
    // Step 3: Compute phi(n)
    int phi_n = (p - 1) * (q - 1);
    printf("phi(n) = %d\n", phi_n);
    
    // Step 4: Compute the multiplicative inverse of e modulo phi_n
    int x, y;
    int gcd_value = extended_euclidean(e, phi_n, &x, &y);
    
    // Ensure x is positive
    if (x < 0) {
        x += phi_n;
    }
    
    int d = x;
    printf("The private key d is: %d\n", d);
    
    return 0;
}
