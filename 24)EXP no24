#include <stdio.h>
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}
int extended_euclidean(int a, int b, int *x, int *y) {
    if (b == 0) {
        *x = 1;
        *y = 0;
        return a;
    }
    int x1, y1;
    int gcd = extended_euclidean(b, a % b, &x1, &y1);
    *x = y1;
    *y = x1 - (a / b) * y1;
    return gcd;
}
void factorize_n(int n, int *p, int *q) {
    for (int i = 2; i < n; i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
}
int main() {
    int e = 31;
    int n = 3599;
    int p, q;
    factorize_n(n, &p, &q);
    printf("p = %d, q = %d\n", p, q);
    int phi_n = (p - 1) * (q - 1);
    printf("phi(n) = %d\n", phi_n);
    int x, y;
    int gcd_value = extended_euclidean(e, phi_n, &x, &y);
    if (x < 0) {
        x += phi_n;
    }
    int d = x;
    printf("The private key d is: %d\n", d);
    return 0;
}
